import React, { useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, Dimensions } from 'react-native';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import * as Animatable from 'react-native-animatable';

const { width } = Dimensions.get('window');

interface Question {
  id: number;
  question: string;
  answer: string;
  difficulty: 'easy' | 'medium' | 'hard';
}

const CInterview = ({ navigation }: any) => {
  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);

  const questions: Question[] = [
    // Basic Concepts (10 questions)
    {
      id: 1,
      question: 'What is C language?',
      answer: 'C is a general-purpose, procedural programming language developed in 1972 by Dennis Ritchie at Bell Labs. It is widely used for system programming, developing operating systems, and embedded systems.',
      difficulty: 'easy'
    },
    {
      id: 2,
      question: 'What are the key features of C language?',
      answer: 'Key features include: procedural language, portability, efficiency, flexibility, rich set of operators, low-level memory access, and structured programming support.',
      difficulty: 'easy'
    },
    {
      id: 3,
      question: 'What is a token in C?',
      answer: 'Tokens are the smallest individual units in a C program. They include keywords, identifiers, constants, strings, operators, and special symbols.',
      difficulty: 'easy'
    },
    {
      id: 4,
      question: 'What is the difference between compiler and interpreter?',
      answer: 'A compiler translates the entire program at once, while an interpreter translates and executes line by line. C uses compilation.',
      difficulty: 'easy'
    },
    {
      id: 5,
      question: 'What is the structure of a C program?',
      answer: 'A typical C program structure includes: preprocessor directives, global declarations, main() function, and other functions.',
      difficulty: 'easy'
    },
    {
      id: 6,
      question: 'What are header files in C?',
      answer: 'Header files contain declarations of functions, macros, and variables that can be shared between multiple source files (e.g., stdio.h, stdlib.h).',
      difficulty: 'easy'
    },
    {
      id: 7,
      question: 'What is the difference between .h and .c files?',
      answer: '.h files contain declarations (header files), while .c files contain implementations (source files).',
      difficulty: 'easy'
    },
    {
      id: 8,
      question: 'What is the entry point of a C program?',
      answer: 'The main() function is the entry point where program execution begins.',
      difficulty: 'easy'
    },
    {
      id: 9,
      question: 'What are comments in C?',
      answer: 'Comments are non-executable text used to document code. C supports single-line (//) and multi-line (/* */) comments.',
      difficulty: 'easy'
    },
    {
      id: 10,
      question: 'What is the difference between source code and executable code?',
      answer: 'Source code is human-readable text written by programmers, while executable code is machine-readable binary generated by compilation.',
      difficulty: 'easy'
    },

    // Variables and Data Types (10 questions)
    {
      id: 11,
      question: 'What are the basic data types in C?',
      answer: 'Basic data types include: int, float, double, char, and void.',
      difficulty: 'easy'
    },
    {
      id: 12,
      question: 'What is the difference between signed and unsigned data types?',
      answer: 'Signed types can represent both positive and negative values, while unsigned types can only represent non-negative values.',
      difficulty: 'easy'
    },
    {
      id: 13,
      question: 'What is type casting in C?',
      answer: 'Type casting is converting one data type to another explicitly using the cast operator (type).',
      difficulty: 'easy'
    },
    {
      id: 14,
      question: 'What is the difference between local and global variables?',
      answer: 'Local variables are declared inside a function and have limited scope. Global variables are declared outside functions and are accessible throughout the program.',
      difficulty: 'easy'
    },
    {
      id: 15,
      question: 'What is the difference between declaration and definition?',
      answer: 'Declaration announces properties (type, name) while definition also allocates storage.',
      difficulty: 'medium'
    },
    {
      id: 16,
      question: 'What is the difference between const and #define?',
      answer: 'const is a keyword used to declare variables as constant, while #define is a preprocessor directive used to define constant values or macros.',
      difficulty: 'medium'
    },
    {
      id: 17,
      question: 'What is the volatile keyword used for?',
      answer: 'volatile tells the compiler that a variable may change unexpectedly, preventing optimization.',
      difficulty: 'hard'
    },
    {
      id: 18,
      question: 'What is the difference between auto, static, and register storage classes?',
      answer: 'auto is default for local variables, static preserves value between calls, register suggests storing in CPU register.',
      difficulty: 'medium'
    },
    {
      id: 19,
      question: 'What is the purpose of extern keyword?',
      answer: 'extern declares a variable or function that is defined in another file.',
      difficulty: 'medium'
    },
    {
      id: 20,
      question: 'What is the difference between sizeof and strlen?',
      answer: 'sizeof returns the size of a data type including null terminator, strlen returns string length excluding null terminator.',
      difficulty: 'medium'
    },

    // Operators and Expressions (10 questions)
    {
      id: 21,
      question: 'What are the different types of operators in C?',
      answer: 'Arithmetic, relational, logical, bitwise, assignment, and special operators.',
      difficulty: 'easy'
    },
    {
      id: 22,
      question: 'What is the difference between = and == operators?',
      answer: '= is assignment, == is equality comparison.',
      difficulty: 'easy'
    },
    {
      id: 23,
      question: 'What is operator precedence?',
      answer: 'The order in which operators are evaluated in an expression.',
      difficulty: 'easy'
    },
    {
      id: 24,
      question: 'What are bitwise operators?',
      answer: 'Operators that work on bits: & (AND), | (OR), ^ (XOR), ~ (NOT), << (left shift), >> (right shift).',
      difficulty: 'medium'
    },
    {
      id: 25,
      question: 'What is the ternary operator?',
      answer: 'condition ? expression1 : expression2 - A shorthand if-else.',
      difficulty: 'easy'
    },
    {
      id: 26,
      question: 'What is the difference between ++i and i++?',
      answer: '++i is pre-increment (increments before use), i++ is post-increment (increments after use).',
      difficulty: 'easy'
    },
    {
      id: 27,
      question: 'What is short-circuit evaluation?',
      answer: 'Logical operators stop evaluating when the result is determined (e.g., false && anything is false).',
      difficulty: 'medium'
    },
    {
      id: 28,
      question: 'What is the comma operator?',
      answer: 'Evaluates multiple expressions and returns the value of the last one (e.g., a = (b=3, b+2) sets a to 5).',
      difficulty: 'hard'
    },
    {
      id: 29,
      question: 'What is the difference between & and && operators?',
      answer: '& is bitwise AND, && is logical AND.',
      difficulty: 'easy'
    },
    {
      id: 30,
      question: 'What is the sizeof operator?',
      answer: 'Returns the size in bytes of a variable or data type.',
      difficulty: 'easy'
    },

    // Control Flow (10 questions)
    {
      id: 31,
      question: 'What are control statements in C?',
      answer: 'if-else, switch, while, do-while, for, break, continue, goto.',
      difficulty: 'easy'
    },
    {
      id: 32,
      question: 'What is the difference between while and do-while loop?',
      answer: 'while checks condition first, do-while checks after executing the body (guaranteed to run at least once).',
      difficulty: 'easy'
    },
    {
      id: 33,
      question: 'What is the difference between break and continue?',
      answer: 'break exits the loop entirely, continue skips to the next iteration.',
      difficulty: 'easy'
    },
    {
      id: 34,
      question: 'What is a nested loop?',
      answer: 'A loop inside another loop.',
      difficulty: 'easy'
    },
    {
      id: 35,
      question: 'What is the goto statement?',
      answer: 'Transfers control to a labeled statement (generally discouraged).',
      difficulty: 'easy'
    },
    {
      id: 36,
      question: 'What is an infinite loop?',
      answer: 'A loop that never terminates due to an always-true condition.',
      difficulty: 'easy'
    },
    {
      id: 37,
      question: 'What is the switch statement?',
      answer: 'A multi-way branch statement that tests a variable against multiple cases.',
      difficulty: 'easy'
    },
    {
      id: 38,
      question: 'What is fall-through in switch case?',
      answer: 'When execution continues to the next case without a break statement.',
      difficulty: 'medium'
    },
    {
      id: 39,
      question: 'What is the difference between if-else and switch?',
      answer: 'if-else can test any condition, switch tests equality against discrete values.',
      difficulty: 'easy'
    },
    {
      id: 40,
      question: 'What is a labeled statement?',
      answer: 'A statement prefixed with an identifier followed by a colon (used with goto).',
      difficulty: 'medium'
    },

    // Functions (10 questions)
    {
      id: 41,
      question: 'What is a function in C?',
      answer: 'A self-contained block of code that performs a specific task.',
      difficulty: 'easy'
    },
    {
      id: 42,
      question: 'What is the difference between function declaration and definition?',
      answer: 'Declaration specifies the function signature, definition includes the implementation.',
      difficulty: 'easy'
    },
    {
      id: 43,
      question: 'What is recursion?',
      answer: 'When a function calls itself directly or indirectly.',
      difficulty: 'medium'
    },
    {
      id: 44,
      question: 'What is the difference between pass by value and pass by reference?',
      answer: 'Pass by value passes a copy, pass by reference passes the address (using pointers).',
      difficulty: 'medium'
    },
    {
      id: 45,
      question: 'What is a function prototype?',
      answer: 'A declaration of a function that specifies its name, return type, and parameters.',
      difficulty: 'easy'
    },
    {
      id: 46,
      question: 'What is a callback function?',
      answer: 'A function passed as an argument to another function.',
      difficulty: 'hard'
    },
    {
      id: 47,
      question: 'What is variable scope?',
      answer: 'The region of code where a variable can be accessed.',
      difficulty: 'easy'
    },
    {
      id: 48,
      question: 'What is the difference between actual and formal parameters?',
      answer: 'Actual parameters are passed to the function, formal parameters are declared in the function definition.',
      difficulty: 'easy'
    },
    {
      id: 49,
      question: 'What is a variadic function?',
      answer: 'A function that can accept a variable number of arguments (e.g., printf).',
      difficulty: 'hard'
    },
    {
      id: 50,
      question: 'What is inline function?',
      answer: 'A function that the compiler may insert directly at the call site to reduce overhead.',
      difficulty: 'hard'
    },

    // Pointers (10 questions)
    {
      id: 51,
      question: 'What is a pointer?',
      answer: 'A variable that stores the memory address of another variable.',
      difficulty: 'medium'
    },
    {
      id: 52,
      question: 'What is pointer arithmetic?',
      answer: 'Performing arithmetic operations on pointer addresses (e.g., incrementing to access next element).',
      difficulty: 'medium'
    },
    {
      id: 53,
      question: 'What is a null pointer?',
      answer: 'A pointer that does not point to any valid memory location (NULL).',
      difficulty: 'easy'
    },
    {
      id: 54,
      question: 'What is a void pointer?',
      answer: 'A generic pointer that can point to any data type (must be cast before dereferencing).',
      difficulty: 'medium'
    },
    {
      id: 55,
      question: 'What is a dangling pointer?',
      answer: 'A pointer that points to memory that has been freed or deallocated.',
      difficulty: 'hard'
    },
    {
      id: 56,
      question: 'What is a function pointer?',
      answer: 'A pointer that points to a function instead of data.',
      difficulty: 'hard'
    },
    {
      id: 57,
      question: 'What is the difference between array and pointer?',
      answer: 'An array is a collection of elements, a pointer stores an address. Array names are constant pointers.',
      difficulty: 'medium'
    },
    {
      id: 58,
      question: 'What is pointer to pointer?',
      answer: 'A pointer that stores the address of another pointer.',
      difficulty: 'hard'
    },
    {
      id: 59,
      question: 'What is the difference between * and & operators?',
      answer: '* dereferences a pointer, & returns the address of a variable.',
      difficulty: 'easy'
    },
    {
      id: 60,
      question: 'What is a wild pointer?',
      answer: 'An uninitialized pointer that points to random memory.',
      difficulty: 'medium'
    },

    // Memory Management (10 questions)
    {
      id: 61,
      question: 'What is dynamic memory allocation?',
      answer: 'Allocating memory at runtime using malloc(), calloc(), realloc(), and freeing with free().',
      difficulty: 'medium'
    },
    {
      id: 62,
      question: 'What is the difference between malloc() and calloc()?',
      answer: 'malloc() allocates uninitialized memory, calloc() allocates and initializes to zero.',
      difficulty: 'medium'
    },
    {
      id: 63,
      question: 'What is realloc() used for?',
      answer: 'To resize previously allocated memory blocks.',
      difficulty: 'medium'
    },
    {
      id: 64,
      question: 'What is a memory leak?',
      answer: 'When allocated memory is not freed, causing memory to be unavailable for reuse.',
      difficulty: 'medium'
    },
    {
      id: 65,
      question: 'What is the difference between stack and heap memory?',
      answer: 'Stack is for local variables (automatic management), heap is for dynamic allocation (manual management).',
      difficulty: 'medium'
    },
    {
      id: 66,
      question: 'What is segmentation fault?',
      answer: 'An error caused by accessing invalid memory (NULL pointer, freed memory, etc.).',
      difficulty: 'hard'
    },
    {
      id: 67,
      question: 'What is garbage collection in C?',
      answer: 'C does not have built-in garbage collection - memory must be managed manually.',
      difficulty: 'easy'
    },
    {
      id: 68,
      question: 'What is the purpose of free()?',
      answer: 'To deallocate memory previously allocated by malloc(), calloc(), or realloc().',
      difficulty: 'easy'
    },
    {
      id: 69,
      question: 'What is memory fragmentation?',
      answer: 'When free memory is broken into small, non-contiguous blocks that are hard to use.',
      difficulty: 'hard'
    },
    {
      id: 70,
      question: 'What is the difference between static and dynamic memory allocation?',
      answer: 'Static allocation happens at compile time (fixed size), dynamic at runtime (flexible size).',
      difficulty: 'medium'
    },

    // Advanced Topics (10 questions)
    {
      id: 71,
      question: 'What are command line arguments?',
      answer: 'Parameters passed to main() via argc and argv when the program is executed.',
      difficulty: 'medium'
    },
    {
      id: 72,
      question: 'What are file operations in C?',
      answer: 'Operations like fopen(), fclose(), fread(), fwrite(), etc. for file handling.',
      difficulty: 'medium'
    },
    {
      id: 73,
      question: 'What is a structure in C?',
      answer: 'A user-defined data type that groups variables of different types under one name.',
      difficulty: 'easy'
    },
    {
      id: 74,
      question: 'What is a union?',
      answer: 'Similar to a structure but all members share the same memory location.',
      difficulty: 'medium'
    },
    {
      id: 75,
      question: 'What is typedef?',
      answer: 'Used to create an alias name for existing data types.',
      difficulty: 'easy'
    },
    {
      id: 76,
      question: 'What are bit fields?',
      answer: 'Allow packing of data in structures to save memory by specifying bit lengths for members.',
      difficulty: 'hard'
    },
    {
      id: 77,
      question: 'What are preprocessor directives?',
      answer: 'Commands processed before compilation (e.g., #include, #define, #ifdef).',
      difficulty: 'easy'
    },
    {
      id: 78,
      question: 'What is the difference between #include <> and #include ""?',
      answer: '<> looks in system directories, "" looks in current directory first.',
      difficulty: 'easy'
    },
    {
      id: 79,
      question: 'What are macros in C?',
      answer: 'Preprocessor definitions that perform text substitution before compilation.',
      difficulty: 'medium'
    },
    {
      id: 80,
      question: 'What is the difference between macro and function?',
      answer: 'Macros perform text substitution, functions are actual code. Macros don\'t have type checking.',
      difficulty: 'medium'
    }
  ];


  const toggleQuestion = (id: number) => {
    setExpandedQuestion(expandedQuestion === id ? null : id);
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return '#2ecc71';
      case 'medium': return '#f39c12';
      case 'hard': return '#e74c3c';
      default: return '#3498db';
    }
  };

  const getCardColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return '#2c3e50';
      case 'medium': return '#3d566e';
      case 'hard': return '#4a6b8a';
      default: return '#2c3e50';
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
          <MaterialCommunityIcons name="arrow-left" size={24} color="#fff" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>C Interview Questions</Text>
      </View>

      <ScrollView contentContainerStyle={styles.scrollContent}>
        {questions.map((item, index) => (
          <Animatable.View 
            key={item.id}
            animation="fadeInUp"
            delay={index * 100}
            duration={600}
            useNativeDriver
            style={styles.cardContainer}
          >
            <TouchableOpacity 
              onPress={() => toggleQuestion(item.id)}
              activeOpacity={0.9}
            >
              <View 
                style={[
                  styles.card, 
                  { 
                    backgroundColor: getCardColor(item.difficulty),
                    transform: [{ rotateY: expandedQuestion === item.id ? '10deg' : '0deg' }] 
                  }
                ]}
              >
                <View style={styles.questionHeader}>
                  <Text style={styles.questionText}>{item.question}</Text>
                  <View style={[styles.difficultyBadge, { backgroundColor: getDifficultyColor(item.difficulty) }]}>
                    <Text style={styles.difficultyText}>{item.difficulty}</Text>
                  </View>
                </View>
                
                {expandedQuestion === item.id && (
                  <Animatable.View 
                    animation="fadeIn"
                    duration={500}
                    style={styles.answerContainer}
                  >
                    <Text style={styles.answerText}>{item.answer}</Text>
                    <MaterialCommunityIcons 
                      name="check-circle" 
                      size={24} 
                      color="#2ecc71" 
                      style={styles.checkIcon}
                    />
                  </Animatable.View>
                )}
              </View>
            </TouchableOpacity>
          </Animatable.View>
        ))}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a2e',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
    paddingTop: 30,
    backgroundColor: 'rgba(0,0,0,0.3)',
  },
  backButton: {
    marginRight: 15,
  },
  headerTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#fff',
  },
  scrollContent: {
    padding: 20,
    paddingBottom: 40,
  },
  cardContainer: {
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 10 },
    shadowOpacity: 0.3,
    shadowRadius: 20,
    elevation: 10,
  },
  card: {
    borderRadius: 15,
    padding: 20,
    minHeight: 80,
    justifyContent: 'center',
    transformOrigin: 'left center',
  },
  questionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  questionText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
    flex: 1,
    marginRight: 10,
  },
  difficultyBadge: {
    paddingHorizontal: 10,
    paddingVertical: 3,
    borderRadius: 10,
  },
  difficultyText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  answerContainer: {
    marginTop: 15,
    paddingTop: 15,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255,255,255,0.2)',
    position: 'relative',
  },
  answerText: {
    color: '#ecf0f1',
    fontSize: 14,
    lineHeight: 20,
  },
  checkIcon: {
    position: 'absolute',
    right: 0,
    bottom: 0,
  },
});

export default CInterview;